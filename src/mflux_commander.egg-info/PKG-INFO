Metadata-Version: 2.2
Name: mflux-commander
Version: 1.0.0
Summary: A CLI tool for managing and exploring image generation with mflux-generate
Home-page: https://github.com/wschenk/mflux-commander
Author: Will Schenk
Author-email: wschenk@gmail.com
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: click>=8.0.0
Requires-Dist: requests>=2.25.0
Provides-Extra: dev
Requires-Dist: pytest>=6.0.0; extra == "dev"
Requires-Dist: pytest-cov>=2.0.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: isort>=5.0.0; extra == "dev"
Requires-Dist: flake8>=4.0.0; extra == "dev"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# MFlux Commander

Use flux models on your Apple Silicon machine.

[filipstrand/mflux](https://github.com/filipstrand/mflux) is a MLX port of FLUX based on the Huggingface Diffusers implementation, and `mflux-commander` is a tool that lets you manage all of the parameters for image generation.

## Quick Start

```bash
# Install mflux and mflux-commander
uv tool install -p 3.12 --upgrade mflux
pip install mflux-commander

# Generate an image with default settings
mflux-commander generate --prompt "a magical forest"

# Generate multiple variations
mflux-commander generate --prompt "a magical forest" --iterations 3

# Apply a style
mflux-commander generate --prompt "a magical forest" --style ghibli

# Explore variations of a specific seed
mflux-commander generate --prompt "a magical forest" --seed 185769 --vary-steps 1,3,5,9

# Get creative prompt suggestions
mflux-commander brainstorm "homegrown software"
```

## Overview

MFlux Commander is a CLI tool for working directly with image generation models, designed for both local development and direct model exploration. Unlike polished products like Midjourney, it provides raw access to the underlying model capabilities, making it invaluable for understanding model behavior and prototyping new features.

Key features include:

- Control over inference steps (1-step previews to 9-step detailed renders)
- Session management and live preview
- Detailed logging for automation and experimentation
- Multiple iterations with random or fixed seeds
- Style management and reuse
- Interactive HTML galleries
- Seed and step variation modes

## Command Reference

### Basic Generation

```bash
# Basic image generation
mflux-commander generate --prompt "your prompt"

# Multiple iterations
mflux-commander generate --prompt "your prompt" --iterations 4

# Specific seed
mflux-commander generate --prompt "your prompt" --seed 12345

# Different model
mflux-commander generate --prompt "your prompt" --model dev
```

### Resolution Options

Standard Formats:

- `--resolution WxH` - Custom resolution (default: 1024x1024)
- `--landscape` - 16:9 format (1024x576)
- `--portrait` - 3:4 format (768x1024)

Small Formats:

- `--landscape-sm` - Small 16:9 (512x288)
- `--portrait-sm` - Small 3:4 (384x512)
- `--square-sm` - Small square (512x512)

Large Formats:

- `--landscape-lg` - Large 16:9 (1536x864)
- `--portrait-lg` - Large 3:4 (1152x1536)
- `--square-lg` - Large square (1536x1536)

Extra Large Formats:

- `--landscape-xl` - XL 16:9 (2048x1152)
- `--portrait-xl` - XL 3:4 (1536x2048)
- `--square-xl` - XL square (2048x2048)

### Style Management

```bash
# Save a new style
mflux-commander save-style "cyberpunk" "neon-lit, cybernetic, high-tech, dystopian future"

# List available styles
mflux-commander list-styles

# Use a style
mflux-commander generate --prompt "city street" --style cyberpunk

# Remove style
mflux-commander generate --prompt "city street" --style none
```

### Advanced Features

Seed Variations:

```bash
# Generate with different random seeds
mflux-commander generate --prompt "your prompt" --vary-seed --iterations 4

# Explore step variations with fixed seed
mflux-commander generate --prompt "your prompt" --seed 12345 --vary-steps 1,3,5,9
```

Brainstorming:

```bash
# Generate creative prompt variations
mflux-commander brainstorm "concept"

# Generate images from specific prompts
mflux-commander run-prompts "2,4,5"
```

Session Management:

```bash
# Force new session
mflux-commander generate --prompt "your prompt" --new

# Disable live preview
mflux-commander generate --prompt "your prompt" --no-watch
```

### Output Options

- `--metadata` - Include generation metadata in output
- `--output-dir DIR` - Custom output directory
- `--no-watch` - Disable live preview

## Output Structure

Each session creates a directory with format `mflux_output_YYYYMMDD_HHMMSS` containing:

```
mflux_output_YYYYMMDD_HHMMSS/
├── index.html                 # Main gallery
├── brainstorm_results.json    # Brainstorming results
└── run_N/                     # Run directories
    ├── index.html            # Run gallery
    ├── image_N.png          # Generated images
    ├── metadata.json        # Run metadata
    └── run_info.json        # Run configuration
```

Sessions are maintained for 4 hours before creating a new one, or you can force a new session with `--new`.

## Installation

```bash
# Install mflux
uv tool install -p 3.12 --upgrade mflux

# Install mflux-commander
pip install mflux-commander
```

### Requirements

- Python 3.8+
- MLX (Apple Silicon only)
- Optional: `live-server` for live preview (`npm install -g live-server`)

## Development

```bash
# Clone repository
git clone https://github.com/wschenk/mflux-commander
cd mflux-commander

# Install development dependencies
pip install -e ".[dev]"

# Run tests
pytest
```

## Future Features

- [ ] Image to image generation
- [ ] Lora model support
- [ ] Custom model training

## License

MIT
